<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to here.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-17T14:28:27.571Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Pathfinder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Algorithm introduce</title>
    <link href="http://yoursite.com/2017/11/17/algorithm_introduce/"/>
    <id>http://yoursite.com/2017/11/17/algorithm_introduce/</id>
    <published>2017-11-17T14:35:37.000Z</published>
    <updated>2017-11-17T14:28:27.571Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Algorithm introduce：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>Algorithm introduce<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h2 id="谈及数据结构需要考虑的问题："><a href="#谈及数据结构需要考虑的问题：" class="headerlink" title="谈及数据结构需要考虑的问题："></a>谈及数据结构需要考虑的问题：</h2><pre><code>为什么要引入这种数据结构？逻辑结构？存储结构？时间复杂度？空间复杂度？</code></pre><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>指代的就是这种数据结构产生的背景</li></ul><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><ul><li>算法设计取决于逻辑结构</li><li>按照逻辑结构进行划分，常见的数结构可以分为 <strong>线性结构</strong> 和 <strong>非线性结构</strong><ul><li>线性结构 如线性表</li><li>非线性结构如 集合（数据集合）、树（一对多）、图（多对多）</li></ul></li><li>另外说明：树是一种特殊的图</li></ul><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ul><li>算法的实现依赖于所采用的存储结构</li><li>常见的存储结构有<pre><code>顺序存储： 优点：随机存取；                            缺点：产生碎片，不易扩容链式存储： 优点：充分利用存储单元；              缺点：存储指针消耗额外存储空间索引存储： 优点：检索速度极快；                     缺点：消耗存储空间存储索引表散列存储： 优点：检索、增减数据速度快；        缺点：散列函数可能存在冲突，解决冲突将消耗额外的时间和空间。</code></pre></li></ul><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>理论：<pre><code>T(n): 算法中所有语句的频度之和，为算法规模 n 的一个函数O(n): 为了减少无关紧要的语句对算法时间复杂度的分析，取程序最深层循环内的语句作为时间复杂度分析，根据极限理论，当 n -&gt; 正无穷时，和 T(n) 同一个数量级；</code></pre></li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><pre><code>在存储空间白菜价格的年代，请忽略空间复杂度。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Algorithm introduce：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;Algorithm introduce&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/09/hello-world/"/>
    <id>http://yoursite.com/2017/11/09/hello-world/</id>
    <published>2017-11-09T00:44:52.630Z</published>
    <updated>2017-11-12T02:10:12.351Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="java_group" scheme="http://yoursite.com/tags/java-group/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第11天-红黑树</title>
    <link href="http://yoursite.com/2017/10/30/mike/"/>
    <id>http://yoursite.com/2017/10/30/mike/</id>
    <published>2017-10-30T14:35:37.000Z</published>
    <updated>2017-11-17T14:30:47.925Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第11天-红黑树：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>红黑树<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h2 id="谈及数据结构需要考虑的问题："><a href="#谈及数据结构需要考虑的问题：" class="headerlink" title="谈及数据结构需要考虑的问题："></a>谈及数据结构需要考虑的问题：</h2><pre><code>为什么要引入这种数据结构？逻辑结构？存储结构？时间复杂度？空间复杂度？</code></pre><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>指代的就是这种数据结构产生的背景</li></ul><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><ul><li>算法设计取决于逻辑结构</li><li>按照逻辑结构进行划分，常见的数结构可以分为 <strong>线性结构</strong> 和 <strong>非线性结构</strong><ul><li>线性结构 如线性表</li><li>非线性结构如 集合（数据集合）、树（一对多）、图（多对多）</li></ul></li><li>另外说明：树是一种特殊的图</li></ul><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ul><li>算法的实现依赖于所采用的存储结构</li><li>常见的存储结构有<pre><code>顺序存储： 优点：随机存取；                            缺点：产生碎片，不易扩容链式存储： 优点：充分利用存储单元；              缺点：存储指针消耗额外存储空间索引存储： 优点：检索速度极快；                     缺点：消耗存储空间存储索引表散列存储： 优点：检索、增减数据速度快；        缺点：散列函数可能存在冲突，解决冲突将消耗额外的时间和空间。</code></pre></li></ul><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>理论：<pre><code>T(n): 算法中所有语句的频度之和，为算法规模 n 的一个函数O(n): 为了减少无关紧要的语句对算法时间复杂度的分析，取程序最深层循环内的语句作为时间复杂度分析，根据极限理论，当 n -&gt; 正无穷时，和 T(n) 同一个数量级；</code></pre></li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><pre><code>在存储空间白菜价格的年代，请忽略空间复杂度。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第11天-红黑树：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;红黑树&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第11天-红黑树</title>
    <link href="http://yoursite.com/2017/10/30/test/"/>
    <id>http://yoursite.com/2017/10/30/test/</id>
    <published>2017-10-30T14:35:37.000Z</published>
    <updated>2017-11-17T14:28:39.922Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第11天-红黑树：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>红黑树<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h2 id="谈及数据结构需要考虑的问题："><a href="#谈及数据结构需要考虑的问题：" class="headerlink" title="谈及数据结构需要考虑的问题："></a>谈及数据结构需要考虑的问题：</h2><pre><code>为什么要引入这种数据结构？逻辑结构？存储结构？时间复杂度？空间复杂度？</code></pre><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>指代的就是这种数据结构产生的背景</li></ul><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><ul><li>算法设计取决于逻辑结构</li><li>按照逻辑结构进行划分，常见的数结构可以分为 <strong>线性结构</strong> 和 <strong>非线性结构</strong><ul><li>线性结构 如线性表</li><li>非线性结构如 集合（数据集合）、树（一对多）、图（多对多）</li></ul></li><li>另外说明：树是一种特殊的图</li></ul><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ul><li>算法的实现依赖于所采用的存储结构</li><li>常见的存储结构有<pre><code>顺序存储： 优点：随机存取；                            缺点：产生碎片，不易扩容链式存储： 优点：充分利用存储单元；              缺点：存储指针消耗额外存储空间索引存储： 优点：检索速度极快；                     缺点：消耗存储空间存储索引表散列存储： 优点：检索、增减数据速度快；        缺点：散列函数可能存在冲突，解决冲突将消耗额外的时间和空间。</code></pre></li></ul><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>理论：<pre><code>T(n): 算法中所有语句的频度之和，为算法规模 n 的一个函数O(n): 为了减少无关紧要的语句对算法时间复杂度的分析，取程序最深层循环内的语句作为时间复杂度分析，根据极限理论，当 n -&gt; 正无穷时，和 T(n) 同一个数量级；</code></pre></li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><pre><code>在存储空间白菜价格的年代，请忽略空间复杂度。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第11天-红黑树：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;红黑树&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第11天-红黑树</title>
    <link href="http://yoursite.com/2017/10/30/testtest/"/>
    <id>http://yoursite.com/2017/10/30/testtest/</id>
    <published>2017-10-30T14:35:37.000Z</published>
    <updated>2017-11-17T14:31:20.398Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第11天-红黑树：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>红黑树<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h2 id="谈及数据结构需要考虑的问题："><a href="#谈及数据结构需要考虑的问题：" class="headerlink" title="谈及数据结构需要考虑的问题："></a>谈及数据结构需要考虑的问题：</h2><pre><code>为什么要引入这种数据结构？逻辑结构？存储结构？时间复杂度？空间复杂度？</code></pre><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>指代的就是这种数据结构产生的背景</li></ul><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><ul><li>算法设计取决于逻辑结构</li><li>按照逻辑结构进行划分，常见的数结构可以分为 <strong>线性结构</strong> 和 <strong>非线性结构</strong><ul><li>线性结构 如线性表</li><li>非线性结构如 集合（数据集合）、树（一对多）、图（多对多）</li></ul></li><li>另外说明：树是一种特殊的图</li></ul><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ul><li>算法的实现依赖于所采用的存储结构</li><li>常见的存储结构有<pre><code>顺序存储： 优点：随机存取；                            缺点：产生碎片，不易扩容链式存储： 优点：充分利用存储单元；              缺点：存储指针消耗额外存储空间索引存储： 优点：检索速度极快；                     缺点：消耗存储空间存储索引表散列存储： 优点：检索、增减数据速度快；        缺点：散列函数可能存在冲突，解决冲突将消耗额外的时间和空间。</code></pre></li></ul><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>理论：<pre><code>T(n): 算法中所有语句的频度之和，为算法规模 n 的一个函数O(n): 为了减少无关紧要的语句对算法时间复杂度的分析，取程序最深层循环内的语句作为时间复杂度分析，根据极限理论，当 n -&gt; 正无穷时，和 T(n) 同一个数量级；</code></pre></li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><pre><code>在存储空间白菜价格的年代，请忽略空间复杂度。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第11天-红黑树：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;红黑树&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
